/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  MasterChef,
  MasterChefInterface,
} from "../../contracts/MasterChef";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract GrayToken",
        name: "_gray",
        type: "address",
      },
      {
        internalType: "address",
        name: "_devaddr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_grayPerBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_startBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EmergencyWithdraw",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "pid",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_allocPoint",
        type: "uint256",
      },
      {
        internalType: "contract IERC20",
        name: "_lpToken",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_withUpdate",
        type: "bool",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_devaddr",
        type: "address",
      },
    ],
    name: "dev",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "devaddr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
    ],
    name: "emergencyWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_from",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_to",
        type: "uint256",
      },
    ],
    name: "getMultiplier",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "gray",
    outputs: [
      {
        internalType: "contract GrayToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "massUpdatePools",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "pendingGray",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "poolInfo",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "lpToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allocPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastRewardBlock",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "accGrayPerShare",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poolLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_allocPoint",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_withUpdate",
        type: "bool",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalAllocPoint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
    ],
    name: "updatePool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "userInfo",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "rewardDebt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_pid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260006007553480156200001657600080fd5b50604051620020203803806200202083398181016040528101906200003c9190620002ac565b6200005c62000050620000f660201b60201c565b620000fe60201b60201c565b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160038190555080600481905550505050506200031e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001f482620001c7565b9050919050565b60006200020882620001e7565b9050919050565b6200021a81620001fb565b81146200022657600080fd5b50565b6000815190506200023a816200020f565b92915050565b6200024b81620001e7565b81146200025757600080fd5b50565b6000815190506200026b8162000240565b92915050565b6000819050919050565b620002868162000271565b81146200029257600080fd5b50565b600081519050620002a6816200027b565b92915050565b60008060008060808587031215620002c957620002c8620001c2565b5b6000620002d98782880162000229565b9450506020620002ec878288016200025a565b9350506040620002ff8782880162000295565b9250506060620003128782880162000295565b91505092959194509250565b611cf2806200032e6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063715018a6116100ad57806393f1a40b1161007157806393f1a40b146102e6578063d49e77cd14610317578063e2bbb15814610335578063ea4c726d14610351578063f2fde38b146103815761012c565b8063715018a61461025457806386d706781461025e5780638d88a90e1461027c5780638da5cb5b146102985780638dbb1e3a146102b65761012c565b806348cd4cb1116100f457806348cd4cb1146101d857806351eb05a6146101f65780635312ea8e14610212578063630b5ba11461022e57806364482f79146102385761012c565b8063081e3eda146101315780631526fe271461014f57806317caf6f1146101825780631eaaa045146101a0578063441a3e70146101bc575b600080fd5b61013961039d565b60405161014691906114da565b60405180910390f35b61016960048036038101906101649190611526565b6103aa565b60405161017994939291906115d2565b60405180910390f35b61018a61040a565b60405161019791906114da565b60405180910390f35b6101ba60048036038101906101b5919061169f565b610410565b005b6101d660048036038101906101d191906116f2565b610527565b005b6101e06107e4565b6040516101ed91906114da565b60405180910390f35b610210600480360381019061020b9190611526565b6107ea565b005b61022c60048036038101906102279190611526565b610aa2565b005b610236610c2f565b005b610252600480360381019061024d9190611732565b610c62565b005b61025c610cfa565b005b610266610d0e565b60405161027391906117a6565b60405180910390f35b610296600480360381019061029191906117ed565b610d34565b005b6102a0610e08565b6040516102ad9190611829565b60405180910390f35b6102d060048036038101906102cb91906116f2565b610e31565b6040516102dd91906114da565b60405180910390f35b61030060048036038101906102fb9190611844565b610e47565b60405161030e929190611884565b60405180910390f35b61031f610e78565b60405161032c9190611829565b60405180910390f35b61034f600480360381019061034a91906116f2565b610e9e565b005b61036b60048036038101906103669190611844565b61110e565b60405161037891906114da565b60405180910390f35b61039b600480360381019061039691906117ed565b6112f4565b005b6000600580549050905090565b600581815481106103ba57600080fd5b90600052602060002090600402016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154908060020154908060030154905084565b60075481565b610418611377565b801561042757610426610c2f565b5b6000600454431161043a5760045461043c565b435b9050836007600082825461045091906118dc565b92505081905550600560405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018381526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030155505050505050565b60006005838154811061053d5761053c611910565b5b9060005260206000209060040201905060006006600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905082816000015410156105b257600080fd5b6105bb846107ea565b6000816001015464e8d4a51000846003015484600001546105dc919061193f565b6105e691906119b0565b6105f091906119e1565b9050600081111561069d57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610658929190611a15565b6020604051808303816000875af1158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190611a53565b505b6000841115610762578382600001546106b691906119e1565b82600001819055508260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161071d929190611a15565b6020604051808303816000875af115801561073c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107609190611a53565b505b64e8d4a510008360030154836000015461077c919061193f565b61078691906119b0565b8260010181905550843373ffffffffffffffffffffffffffffffffffffffff167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568866040516107d591906114da565b60405180910390a35050505050565b60045481565b600060058281548110610800576107ff611910565b5b90600052602060002090600402019050806002015443116108215750610a9f565b60008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108809190611829565b602060405180830381865afa15801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c19190611a95565b9050600081036108db574382600201819055505050610a9f565b60006108eb836002015443610e31565b90506000600754846001015460035484610905919061193f565b61090f919061193f565b61091991906119b0565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f19600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8461098991906119b0565b6040518363ffffffff1660e01b81526004016109a6929190611a15565b600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b50505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610a35929190611a15565b600060405180830381600087803b158015610a4f57600080fd5b505af1158015610a63573d6000803e3d6000fd5b505050508264e8d4a5100082610a79919061193f565b610a8391906119b0565b8460030154610a9291906118dc565b8460030181905550505050505b50565b600060058281548110610ab857610ab7611910565b5b9060005260206000209060040201905060006006600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383600001546040518363ffffffff1660e01b8152600401610b7f929190611a15565b6020604051808303816000875af1158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc29190611a53565b50823373ffffffffffffffffffffffffffffffffffffffff167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958360000154604051610c0e91906114da565b60405180910390a36000816000018190555060008160010181905550505050565b6000600580549050905060005b81811015610c5e57610c4d816107ea565b80610c5790611ac2565b9050610c3c565b5050565b610c6a611377565b8015610c7957610c78610c2f565b5b600060058481548110610c8f57610c8e611910565b5b90600052602060002090600402016001015490508260058581548110610cb857610cb7611910565b5b906000526020600020906004020160010181905550828114610cf4578281600754610ce391906119e1565b610ced91906118dc565b6007819055505b50505050565b610d02611377565b610d0c60006113f5565b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb90611b67565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008282610e3f91906119e1565b905092915050565b6006602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060058381548110610eb457610eb3611910565b5b9060005260206000209060040201905060006006600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050610f21846107ea565b600081600001541115611012576000816001015464e8d4a5100084600301548460000154610f4f919061193f565b610f5991906119b0565b610f6391906119e1565b9050600081111561101057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610fcb929190611a15565b6020604051808303816000875af1158015610fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100e9190611a53565b505b505b60008311156110dc578160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161107c93929190611b87565b6020604051808303816000875af115801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190611a53565b50828160000160008282546110d491906118dc565b925050819055505b64e8d4a51000826003015482600001546110f6919061193f565b61110091906119b0565b816001018190555050505050565b6000806005848154811061112557611124611910565b5b9060005260206000209060040201905060006006600086815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008260030154905060008360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111f19190611829565b602060405180830381865afa15801561120e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112329190611a95565b9050836002015443118015611248575060008114155b156112b957600061125d856002015443610e31565b90506000600754866001015460035484611277919061193f565b611281919061193f565b61128b91906119b0565b90508264e8d4a510008261129f919061193f565b6112a991906119b0565b846112b491906118dc565b935050505b826001015464e8d4a510008385600001546112d4919061193f565b6112de91906119b0565b6112e891906119e1565b94505050505092915050565b6112fc611377565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361136b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136290611c30565b60405180910390fd5b611374816113f5565b50565b61137f6114b9565b73ffffffffffffffffffffffffffffffffffffffff1661139d610e08565b73ffffffffffffffffffffffffffffffffffffffff16146113f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ea90611c9c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b6114d4816114c1565b82525050565b60006020820190506114ef60008301846114cb565b92915050565b600080fd5b611503816114c1565b811461150e57600080fd5b50565b600081359050611520816114fa565b92915050565b60006020828403121561153c5761153b6114f5565b5b600061154a84828501611511565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061159861159361158e84611553565b611573565b611553565b9050919050565b60006115aa8261157d565b9050919050565b60006115bc8261159f565b9050919050565b6115cc816115b1565b82525050565b60006080820190506115e760008301876115c3565b6115f460208301866114cb565b61160160408301856114cb565b61160e60608301846114cb565b95945050505050565b600061162282611553565b9050919050565b600061163482611617565b9050919050565b61164481611629565b811461164f57600080fd5b50565b6000813590506116618161163b565b92915050565b60008115159050919050565b61167c81611667565b811461168757600080fd5b50565b60008135905061169981611673565b92915050565b6000806000606084860312156116b8576116b76114f5565b5b60006116c686828701611511565b93505060206116d786828701611652565b92505060406116e88682870161168a565b9150509250925092565b60008060408385031215611709576117086114f5565b5b600061171785828601611511565b925050602061172885828601611511565b9150509250929050565b60008060006060848603121561174b5761174a6114f5565b5b600061175986828701611511565b935050602061176a86828701611511565b925050604061177b8682870161168a565b9150509250925092565b60006117908261159f565b9050919050565b6117a081611785565b82525050565b60006020820190506117bb6000830184611797565b92915050565b6117ca81611617565b81146117d557600080fd5b50565b6000813590506117e7816117c1565b92915050565b600060208284031215611803576118026114f5565b5b6000611811848285016117d8565b91505092915050565b61182381611617565b82525050565b600060208201905061183e600083018461181a565b92915050565b6000806040838503121561185b5761185a6114f5565b5b600061186985828601611511565b925050602061187a858286016117d8565b9150509250929050565b600060408201905061189960008301856114cb565b6118a660208301846114cb565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118e7826114c1565b91506118f2836114c1565b925082820190508082111561190a576119096118ad565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061194a826114c1565b9150611955836114c1565b9250828202611963816114c1565b9150828204841483151761197a576119796118ad565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119bb826114c1565b91506119c6836114c1565b9250826119d6576119d5611981565b5b828204905092915050565b60006119ec826114c1565b91506119f7836114c1565b9250828203905081811115611a0f57611a0e6118ad565b5b92915050565b6000604082019050611a2a600083018561181a565b611a3760208301846114cb565b9392505050565b600081519050611a4d81611673565b92915050565b600060208284031215611a6957611a686114f5565b5b6000611a7784828501611a3e565b91505092915050565b600081519050611a8f816114fa565b92915050565b600060208284031215611aab57611aaa6114f5565b5b6000611ab984828501611a80565b91505092915050565b6000611acd826114c1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611aff57611afe6118ad565b5b600182019050919050565b600082825260208201905092915050565b7f6f6e6c7920646576000000000000000000000000000000000000000000000000600082015250565b6000611b51600883611b0a565b9150611b5c82611b1b565b602082019050919050565b60006020820190508181036000830152611b8081611b44565b9050919050565b6000606082019050611b9c600083018661181a565b611ba9602083018561181a565b611bb660408301846114cb565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611c1a602683611b0a565b9150611c2582611bbe565b604082019050919050565b60006020820190508181036000830152611c4981611c0d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c86602083611b0a565b9150611c9182611c50565b602082019050919050565b60006020820190508181036000830152611cb581611c79565b905091905056fea26469706673582212201dba415d47af80a9087ee28cca2e9b685f9266f50cf5958ef24edf68836ec9a264736f6c63430008110033";

type MasterChefConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MasterChefConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MasterChef__factory extends ContractFactory {
  constructor(...args: MasterChefConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gray: PromiseOrValue<string>,
    _devaddr: PromiseOrValue<string>,
    _grayPerBlock: PromiseOrValue<BigNumberish>,
    _startBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MasterChef> {
    return super.deploy(
      _gray,
      _devaddr,
      _grayPerBlock,
      _startBlock,
      overrides || {}
    ) as Promise<MasterChef>;
  }
  override getDeployTransaction(
    _gray: PromiseOrValue<string>,
    _devaddr: PromiseOrValue<string>,
    _grayPerBlock: PromiseOrValue<BigNumberish>,
    _startBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _gray,
      _devaddr,
      _grayPerBlock,
      _startBlock,
      overrides || {}
    );
  }
  override attach(address: string): MasterChef {
    return super.attach(address) as MasterChef;
  }
  override connect(signer: Signer): MasterChef__factory {
    return super.connect(signer) as MasterChef__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MasterChefInterface {
    return new utils.Interface(_abi) as MasterChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MasterChef {
    return new Contract(address, _abi, signerOrProvider) as MasterChef;
  }
}
