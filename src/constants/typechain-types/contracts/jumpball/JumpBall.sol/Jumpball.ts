/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Jumpball {
  export type GameInfoStruct = {
    typeAndId: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    home: PromiseOrValue<string>;
    away: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    completed: PromiseOrValue<BigNumberish>;
    homeSum: PromiseOrValue<BigNumberish>;
    awaySum: PromiseOrValue<BigNumberish>;
    harvestedSum: PromiseOrValue<BigNumberish>;
    validator: PromiseOrValue<string>;
  };

  export type GameInfoStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    typeAndId: string;
    name: string;
    home: string;
    away: string;
    startTime: BigNumber;
    completed: number;
    homeSum: BigNumber;
    awaySum: BigNumber;
    harvestedSum: BigNumber;
    validator: string;
  };
}

export interface JumpballInterface extends utils.Interface {
  functions: {
    "betting(string,uint256,string,string,string,bool)": FunctionFragment;
    "getGameInfo(string)": FunctionFragment;
    "getMyBetInfo(string)": FunctionFragment;
    "harvest(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "validateGame(string,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "betting"
      | "getGameInfo"
      | "getMyBetInfo"
      | "harvest"
      | "owner"
      | "validateGame"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "betting",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyBetInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateGame",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "betting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMyBetInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateGame",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Jumpball extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JumpballInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    betting(
      _id: PromiseOrValue<string>,
      _date: PromiseOrValue<BigNumberish>,
      _match: PromiseOrValue<string>,
      _home: PromiseOrValue<string>,
      _away: PromiseOrValue<string>,
      _isHome: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGameInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Jumpball.GameInfoStructOutput]>;

    getMyBetInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    harvest(
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    validateGame(
      _id: PromiseOrValue<string>,
      _win: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  betting(
    _id: PromiseOrValue<string>,
    _date: PromiseOrValue<BigNumberish>,
    _match: PromiseOrValue<string>,
    _home: PromiseOrValue<string>,
    _away: PromiseOrValue<string>,
    _isHome: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGameInfo(
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Jumpball.GameInfoStructOutput>;

  getMyBetInfo(
    _id: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  harvest(
    _id: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  validateGame(
    _id: PromiseOrValue<string>,
    _win: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    betting(
      _id: PromiseOrValue<string>,
      _date: PromiseOrValue<BigNumberish>,
      _match: PromiseOrValue<string>,
      _home: PromiseOrValue<string>,
      _away: PromiseOrValue<string>,
      _isHome: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getGameInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Jumpball.GameInfoStructOutput>;

    getMyBetInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    harvest(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    validateGame(
      _id: PromiseOrValue<string>,
      _win: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    betting(
      _id: PromiseOrValue<string>,
      _date: PromiseOrValue<BigNumberish>,
      _match: PromiseOrValue<string>,
      _home: PromiseOrValue<string>,
      _away: PromiseOrValue<string>,
      _isHome: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGameInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyBetInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    validateGame(
      _id: PromiseOrValue<string>,
      _win: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betting(
      _id: PromiseOrValue<string>,
      _date: PromiseOrValue<BigNumberish>,
      _match: PromiseOrValue<string>,
      _home: PromiseOrValue<string>,
      _away: PromiseOrValue<string>,
      _isHome: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGameInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyBetInfo(
      _id: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _id: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateGame(
      _id: PromiseOrValue<string>,
      _win: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
